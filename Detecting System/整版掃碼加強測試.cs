//
// File generated by HDevelop for HALCON/.NET (C#) Version 17.12
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  // Procedures 
  public void gen_circle_center (HObject ho_Image, out HObject ho_UsedEdges, out HObject ho_Contour, 
      out HObject ho_ResultContours, out HObject ho_CrossCenter, HTuple hv_InitialRow, 
      HTuple hv_InitialColumn, HTuple hv_InitialRadius, HTuple hv_Length, HTuple hv_Measure_Threshold, 
      HTuple hv_MeasureTransition, HTuple hv_MeasureSelect, out HTuple hv_ResultRow, 
      out HTuple hv_ResultColumn, out HTuple hv_ResultRadius)
  {




    // Local iconic variables 

    HObject ho_ModelContour, ho_Contours;

    // Local control variables 

    HTuple hv_MetrologyHandle = null, hv_circleIndices = null;
    HTuple hv_circleParameter = null, hv_Row = null, hv_Column = null;
    HTuple hv_UsedRow = null, hv_UsedColumn = null, hv_StartPhi = null;
    HTuple hv_EndPhi = null, hv_PointOrder = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_UsedEdges);
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_ResultContours);
    HOperatorSet.GenEmptyObj(out ho_CrossCenter);
    HOperatorSet.GenEmptyObj(out ho_ModelContour);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    try
    {
      HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
      HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_InitialRow.TupleConcat(
          hv_InitialColumn))).TupleConcat(hv_InitialRadius), hv_Length, 5, 1, hv_Measure_Threshold, 
          new HTuple(), new HTuple(), out hv_circleIndices);
      ho_ModelContour.Dispose();
      HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, 
          "all", 1.5);
      //第一個點或最後一個點
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, 
          "measure_select", hv_MeasureSelect);
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, 
          "min_score", 0.2);
      HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
      HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, 
          "all", "result_type", "all_param", out hv_circleParameter);
      ho_CrossCenter.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_CrossCenter, hv_circleParameter.TupleSelect(
          0), hv_circleParameter.TupleSelect(1), 20, 0.785398);
      //白找黑('negative')或黑找白('positive')
      ho_Contour.Dispose();
      HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour, hv_MetrologyHandle, 
          "all", hv_MeasureTransition, out hv_Row, out hv_Column);
      ho_Contours.Dispose();
      HOperatorSet.GetMetrologyObjectResultContour(out ho_Contours, hv_MetrologyHandle, 
          "all", "all", 1.5);
      HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges", 
          "row", out hv_UsedRow);
      HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges", 
          "column", out hv_UsedColumn);
      ho_UsedEdges.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_UsedEdges, hv_UsedRow, hv_UsedColumn, 
          10, (new HTuple(45)).TupleRad());
      ho_ResultContours.Dispose();
      HOperatorSet.GetMetrologyObjectResultContour(out ho_ResultContours, hv_MetrologyHandle, 
          "all", "all", 1.5);
      HOperatorSet.FitCircleContourXld(ho_ResultContours, "algebraic", -1, 0, 0, 
          3, 2, out hv_ResultRow, out hv_ResultColumn, out hv_ResultRadius, out hv_StartPhi, 
          out hv_EndPhi, out hv_PointOrder);
      HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
      ho_ModelContour.Dispose();
      ho_Contours.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelContour.Dispose();
      ho_Contours.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Local procedures 
  public void find_Barcode (HObject ho_Image, out HObject ho_ResultRegion, HTuple hv_ImageNum, 
      HTuple hv_MaxRow, HTuple hv_MaxColumn, HTuple hv_Phi, HTuple hv_Length1, HTuple hv_Length2, 
      out HTuple hv_num)
  {




    // Local iconic variables 

    HObject ho_RegionMoved;

    // Local control variables 

    HTuple hv_ImageWidth = null, hv_ImageHeight = null;
    HTuple hv_j = null, hv_i = new HTuple(), hv_index = new HTuple();
    HTuple hv_Thread_id = new HTuple(), hv_Result = new HTuple();
    HTuple hv_ResultBarcode = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_ResultRegion);
    HOperatorSet.GenEmptyObj(out ho_RegionMoved);
    try
    {

      HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
      //Width := ImageWidth/7
      //Height := ImageHeight/6

      hv_num = 0;
      ho_RegionMoved.Dispose();
      HOperatorSet.GenEmptyObj(out ho_RegionMoved);
      HTuple end_val7 = hv_MaxRow-1;
      HTuple step_val7 = 1;
      for (hv_j=0; hv_j.Continue(end_val7, step_val7); hv_j = hv_j.TupleAdd(step_val7))
      {
        HTuple end_val8 = hv_MaxColumn-1;
        HTuple step_val8 = 1;
        for (hv_i=0; hv_i.Continue(end_val8, step_val8); hv_i = hv_i.TupleAdd(step_val8))
        {
          hv_index = (hv_j*hv_MaxColumn)+hv_i;
          if (hv_Thread_id == null)
            hv_Thread_id = new HTuple();
          hv_Thread_id[hv_index] = hv_index;
          ho_RegionMoved.Dispose();
          find_BarcodePlus(ho_Image, out ho_RegionMoved, hv_ImageNum, hv_MaxRow, 
              hv_MaxColumn, hv_j, hv_i, hv_Phi, hv_Length1, hv_Length2, out hv_Result, 
              out hv_ResultBarcode);
          //stop ()
        }
      }
      ho_RegionMoved.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_RegionMoved.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void find_BarcodePlus (HObject ho_Image, out HObject ho_RegionMoved, HTuple hv_ImageNumber, 
      HTuple hv_MaxRow, HTuple hv_MaxColumn, HTuple hv_NowRow, HTuple hv_NowColumn, 
      HTuple hv_Phi, HTuple hv_Length1, HTuple hv_Length2, out HTuple hv_Result, out HTuple hv_ResultBarcode)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Rectangle, ho_ImageReduced, ho_ImagePart;
    HObject ho_ImageMedian1, ho_RegionHysteresis, ho_ConnectedRegions;
    HObject ho_RegionFillUp, ho_SelectedRegions=null, ho_Rectangle2=null;
    HObject ho_UsedEdges1=null, ho_Contour1=null, ho_ResultContours=null;
    HObject ho_CrossCenter=null, ho_InnerCircle, ho_OuterCircle;
    HObject ho_RegionDifference, ho_RegionIntersection, ho_RegionIntersectionMove;
    HObject ho_ImageMedian, ho_Region2, ho_RegionFillUp1, ho_SelectedRegions1=null;
    HObject ho_Rectangle1=null, ho_ImageReduced1=null, ho_ImagePart1=null;
    HObject ho_RectangleMove=null, ho_SymbolXLDs, ho_Region=null;

    // Local control variables 

    HTuple hv_ImageWidth = null, hv_ImageHeight = null;
    HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
    HTuple hv_Phi2 = new HTuple(), hv_Length13 = new HTuple();
    HTuple hv_Length23 = new HTuple(), hv_ResultRow = new HTuple();
    HTuple hv_ResultColumn = new HTuple(), hv_ResultRadius = new HTuple();
    HTuple hv_Exception = null, hv_Row2 = new HTuple(), hv_Column2 = new HTuple();
    HTuple hv_Length21 = new HTuple(), hv_Length22 = new HTuple();
    HTuple hv_DataCodeHandle = null, hv_ResultHandles = null;
    HTuple hv_DecodedDataStrings = null, hv_Number = null;
    HTuple hv_BarcodeResult = new HTuple();
    HTuple   hv_Phi_COPY_INP_TMP = hv_Phi.Clone();

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_RegionMoved);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian1);
    HOperatorSet.GenEmptyObj(out ho_RegionHysteresis);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Rectangle2);
    HOperatorSet.GenEmptyObj(out ho_UsedEdges1);
    HOperatorSet.GenEmptyObj(out ho_Contour1);
    HOperatorSet.GenEmptyObj(out ho_ResultContours);
    HOperatorSet.GenEmptyObj(out ho_CrossCenter);
    HOperatorSet.GenEmptyObj(out ho_InnerCircle);
    HOperatorSet.GenEmptyObj(out ho_OuterCircle);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    HOperatorSet.GenEmptyObj(out ho_RegionIntersection);
    HOperatorSet.GenEmptyObj(out ho_RegionIntersectionMove);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian);
    HOperatorSet.GenEmptyObj(out ho_Region2);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_Rectangle1);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_ImagePart1);
    HOperatorSet.GenEmptyObj(out ho_RectangleMove);
    HOperatorSet.GenEmptyObj(out ho_SymbolXLDs);
    HOperatorSet.GenEmptyObj(out ho_Region);
    hv_Result = new HTuple();
    hv_ResultBarcode = new HTuple();
    try
    {
      HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle1(out ho_Rectangle, (hv_NowRow*hv_ImageHeight)/6, 
          (hv_NowColumn*hv_ImageWidth)/7, ((hv_NowRow+1)*hv_ImageHeight)/6, ((hv_NowColumn+1)*hv_ImageWidth)/7);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);
      ho_ImagePart.Dispose();
      HOperatorSet.CropDomain(ho_ImageReduced, out ho_ImagePart);

      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);
      ho_ImagePart.Dispose();
      HOperatorSet.CropDomain(ho_ImageReduced, out ho_ImagePart);
      ho_ImageMedian1.Dispose();
      HOperatorSet.MedianRect(ho_ImagePart, out ho_ImageMedian1, 20, 20);
      ho_RegionHysteresis.Dispose();
      HOperatorSet.HysteresisThreshold(ho_ImageMedian1, out ho_RegionHysteresis, 
          30, 80, 5);
      //threshold (ImagePart, Region1, 80, 255)
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionHysteresis, out ho_ConnectedRegions);
      ho_RegionFillUp.Dispose();
      HOperatorSet.FillUp(ho_ConnectedRegions, out ho_RegionFillUp);
      try
      {


        ho_SelectedRegions.Dispose();
        HOperatorSet.SelectShape(ho_RegionFillUp, out ho_SelectedRegions, (new HTuple("rect2_len1")).TupleConcat(
            "rect2_len2"), "and", ((hv_Length1-20)).TupleConcat(hv_Length2-20), ((hv_Length1+20)).TupleConcat(
            hv_Length2+20));
        HOperatorSet.SmallestRectangle2(ho_SelectedRegions, out hv_Row1, out hv_Column1, 
            out hv_Phi2, out hv_Length13, out hv_Length23);
        ho_Rectangle2.Dispose();
        HOperatorSet.GenRectangle2(out ho_Rectangle2, hv_Row1, hv_Column1, hv_Phi2, 
            hv_Length13, hv_Length23);
        {
        HObject ExpTmpOutVar_0;
        HOperatorSet.ReduceDomain(ho_ImagePart, ho_Rectangle2, out ExpTmpOutVar_0
            );
        ho_ImagePart.Dispose();
        ho_ImagePart = ExpTmpOutVar_0;
        }
        ho_UsedEdges1.Dispose();ho_Contour1.Dispose();ho_ResultContours.Dispose();ho_CrossCenter.Dispose();
        gen_circle_center(ho_ImagePart, out ho_UsedEdges1, out ho_Contour1, out ho_ResultContours, 
            out ho_CrossCenter, hv_Row1, hv_Column1, hv_Length1, 20, 50, "negative", 
            "last", out hv_ResultRow, out hv_ResultColumn, out hv_ResultRadius);
        //gen_rectangle2_center (ImagePart, Contour, UsedEdges, ResultContours1, ImageNumber, ImageNumber, ImageNumber, ImageNumber, ImageNumber, ImageNumber, ImageNumber, 'negative', 'last', ResultRow1, ResultColumn1, ResultPhi, ResultLength1, ResultLength2)
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        ho_Rectangle.Dispose();
        ho_ImageReduced.Dispose();
        ho_ImagePart.Dispose();
        ho_ImageMedian1.Dispose();
        ho_RegionHysteresis.Dispose();
        ho_ConnectedRegions.Dispose();
        ho_RegionFillUp.Dispose();
        ho_SelectedRegions.Dispose();
        ho_Rectangle2.Dispose();
        ho_UsedEdges1.Dispose();
        ho_Contour1.Dispose();
        ho_ResultContours.Dispose();
        ho_CrossCenter.Dispose();
        ho_InnerCircle.Dispose();
        ho_OuterCircle.Dispose();
        ho_RegionDifference.Dispose();
        ho_RegionIntersection.Dispose();
        ho_RegionIntersectionMove.Dispose();
        ho_ImageMedian.Dispose();
        ho_Region2.Dispose();
        ho_RegionFillUp1.Dispose();
        ho_SelectedRegions1.Dispose();
        ho_Rectangle1.Dispose();
        ho_ImageReduced1.Dispose();
        ho_ImagePart1.Dispose();
        ho_RectangleMove.Dispose();
        ho_SymbolXLDs.Dispose();
        ho_Region.Dispose();

        return;
      }

      //gen_region_contour_xld (ResultContours, ResultRegion, 'filled')
      ho_InnerCircle.Dispose();
      HOperatorSet.GenCircle(out ho_InnerCircle, hv_ResultRow, hv_ResultColumn, 210);
      ho_OuterCircle.Dispose();
      HOperatorSet.GenCircle(out ho_OuterCircle, hv_ResultRow, hv_ResultColumn, 275);
      ho_RegionDifference.Dispose();
      HOperatorSet.Difference(ho_OuterCircle, ho_InnerCircle, out ho_RegionDifference
          );
      ho_RegionIntersection.Dispose();
      HOperatorSet.Intersection(ho_RegionDifference, ho_Rectangle2, out ho_RegionIntersection
          );

      ho_RegionIntersectionMove.Dispose();
      HOperatorSet.MoveRegion(ho_RegionIntersection, out ho_RegionIntersectionMove, 
          (hv_NowRow*hv_ImageHeight)/6, (hv_NowColumn*hv_ImageWidth)/7);
      HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
      HOperatorSet.DispObj(ho_RegionIntersectionMove, hv_ExpDefaultWinHandle);

      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_ImagePart, ho_RegionIntersection, out ho_ImageReduced
          );
      ho_ImageMedian.Dispose();
      HOperatorSet.MedianRect(ho_ImageReduced, out ho_ImageMedian, 5, 5);
      ho_Region2.Dispose();
      HOperatorSet.Threshold(ho_ImageMedian, out ho_Region2, 0, 40);
      ho_RegionFillUp1.Dispose();
      HOperatorSet.FillUp(ho_Region2, out ho_RegionFillUp1);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionFillUp1, out ho_ConnectedRegions);
      try
      {


        ho_SelectedRegions1.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions1, (new HTuple("rect2_len1")).TupleConcat(
            "rect2_len2"), "and", (new HTuple(20)).TupleConcat(15), (new HTuple(35)).TupleConcat(
            30));
        HOperatorSet.SmallestRectangle2(ho_SelectedRegions1, out hv_Row2, out hv_Column2, 
            out hv_Phi_COPY_INP_TMP, out hv_Length21, out hv_Length22);
        ho_Rectangle1.Dispose();
        HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_Row2, hv_Column2, hv_Phi_COPY_INP_TMP, 
            hv_Length21, hv_Length22);
        HOperatorSet.RegionFeatures(ho_Rectangle1, "row1", out hv_Row1);
        HOperatorSet.RegionFeatures(ho_Rectangle1, "column1", out hv_Column1);
        ho_ImageReduced1.Dispose();
        HOperatorSet.ReduceDomain(ho_ImagePart, ho_Rectangle1, out ho_ImageReduced1
            );
        ho_ImagePart1.Dispose();
        HOperatorSet.CropDomain(ho_ImageReduced1, out ho_ImagePart1);
        ho_RectangleMove.Dispose();
        HOperatorSet.MoveRegion(ho_Rectangle1, out ho_RectangleMove, (hv_NowRow*hv_ImageHeight)/6, 
            (hv_NowColumn*hv_ImageWidth)/7);
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "blue");
        HOperatorSet.DispObj(ho_RectangleMove, hv_ExpDefaultWinHandle);
      }
      // catch (Exception) 
      catch (HalconException HDevExpDefaultException1)
      {
        HDevExpDefaultException1.ToHTuple(out hv_Exception);
        ho_Rectangle.Dispose();
        ho_ImageReduced.Dispose();
        ho_ImagePart.Dispose();
        ho_ImageMedian1.Dispose();
        ho_RegionHysteresis.Dispose();
        ho_ConnectedRegions.Dispose();
        ho_RegionFillUp.Dispose();
        ho_SelectedRegions.Dispose();
        ho_Rectangle2.Dispose();
        ho_UsedEdges1.Dispose();
        ho_Contour1.Dispose();
        ho_ResultContours.Dispose();
        ho_CrossCenter.Dispose();
        ho_InnerCircle.Dispose();
        ho_OuterCircle.Dispose();
        ho_RegionDifference.Dispose();
        ho_RegionIntersection.Dispose();
        ho_RegionIntersectionMove.Dispose();
        ho_ImageMedian.Dispose();
        ho_Region2.Dispose();
        ho_RegionFillUp1.Dispose();
        ho_SelectedRegions1.Dispose();
        ho_Rectangle1.Dispose();
        ho_ImageReduced1.Dispose();
        ho_ImagePart1.Dispose();
        ho_RectangleMove.Dispose();
        ho_SymbolXLDs.Dispose();
        ho_Region.Dispose();

        return;
      }















      HOperatorSet.CreateDataCode2dModel("Data Matrix ECC 200", "default_parameters", 
          "maximum_recognition", out hv_DataCodeHandle);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "polarity", "light_on_dark");
      //鏡向
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "mirrored", "no");
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "timeout", 2000);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "contrast_tolerance", "high");
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "small_modules_robustness", 
          "high");

      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "symbol_rows_min", 14);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "symbol_rows_max", 18);

      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "module_size_min", 2);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "module_size_max", 5);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "decoding_scheme", "raw");
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "persistence", 0);
      ho_SymbolXLDs.Dispose();
      HOperatorSet.FindDataCode2d(ho_ImagePart1, out ho_SymbolXLDs, hv_DataCodeHandle, 
          "stop_after_result_num", 1, out hv_ResultHandles, out hv_DecodedDataStrings);
      HOperatorSet.CountObj(ho_SymbolXLDs, out hv_Number);
      if ((int)(hv_Number) != 0)
      {
        //存类型
        //存数据
        hv_BarcodeResult = hv_DecodedDataStrings.TupleSelect(0);
        ho_Region.Dispose();
        HOperatorSet.GenRegionContourXld(ho_SymbolXLDs, out ho_Region, "margin");
        ho_RegionMoved.Dispose();
        HOperatorSet.MoveRegion(ho_Region, out ho_RegionMoved, ((hv_NowRow*hv_ImageHeight)/6)+hv_Row1, 
            ((hv_NowColumn*hv_ImageWidth)/7)+hv_Column1);
        HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "green");
        HOperatorSet.DispObj(ho_RegionMoved, hv_ExpDefaultWinHandle);

      }
      HOperatorSet.ClearDataCode2dModel(hv_DataCodeHandle);
      ho_Rectangle.Dispose();
      ho_ImageReduced.Dispose();
      ho_ImagePart.Dispose();
      ho_ImageMedian1.Dispose();
      ho_RegionHysteresis.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_RegionFillUp.Dispose();
      ho_SelectedRegions.Dispose();
      ho_Rectangle2.Dispose();
      ho_UsedEdges1.Dispose();
      ho_Contour1.Dispose();
      ho_ResultContours.Dispose();
      ho_CrossCenter.Dispose();
      ho_InnerCircle.Dispose();
      ho_OuterCircle.Dispose();
      ho_RegionDifference.Dispose();
      ho_RegionIntersection.Dispose();
      ho_RegionIntersectionMove.Dispose();
      ho_ImageMedian.Dispose();
      ho_Region2.Dispose();
      ho_RegionFillUp1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_Rectangle1.Dispose();
      ho_ImageReduced1.Dispose();
      ho_ImagePart1.Dispose();
      ho_RectangleMove.Dispose();
      ho_SymbolXLDs.Dispose();
      ho_Region.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Rectangle.Dispose();
      ho_ImageReduced.Dispose();
      ho_ImagePart.Dispose();
      ho_ImageMedian1.Dispose();
      ho_RegionHysteresis.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_RegionFillUp.Dispose();
      ho_SelectedRegions.Dispose();
      ho_Rectangle2.Dispose();
      ho_UsedEdges1.Dispose();
      ho_Contour1.Dispose();
      ho_ResultContours.Dispose();
      ho_CrossCenter.Dispose();
      ho_InnerCircle.Dispose();
      ho_OuterCircle.Dispose();
      ho_RegionDifference.Dispose();
      ho_RegionIntersection.Dispose();
      ho_RegionIntersectionMove.Dispose();
      ho_ImageMedian.Dispose();
      ho_Region2.Dispose();
      ho_RegionFillUp1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_Rectangle1.Dispose();
      ho_ImageReduced1.Dispose();
      ho_ImagePart1.Dispose();
      ho_RectangleMove.Dispose();
      ho_SymbolXLDs.Dispose();
      ho_Region.Dispose();

      throw HDevExpDefaultException;
    }
  }

  public void gen_rectangle2_center (HObject ho_Image, out HObject ho_Contour, out HObject ho_UsedEdges, 
      out HObject ho_ResultContours, HTuple hv_InitialRow, HTuple hv_InitialColumn, 
      HTuple hv_InitialPhi, HTuple hv_InitialLength1, HTuple hv_InitialLength2, HTuple hv_MeasureLength, 
      HTuple hv_MeasureThreshold, HTuple hv_MeasureTransition, HTuple hv_MeasureSelect, 
      out HTuple hv_ResultRow, out HTuple hv_ResultColumn, out HTuple hv_ResultPhi, 
      out HTuple hv_ResultLength1, out HTuple hv_ResultLength2)
  {




    // Local iconic variables 

    HObject ho_ModelContour, ho_CrossCenter, ho_Contours;

    // Local control variables 

    HTuple hv_MetrologyHandle = null, hv_circleIndices = null;
    HTuple hv_circleParameter = null, hv_Row = null, hv_Column = null;
    HTuple hv_UsedRow = null, hv_UsedColumn = null, hv_PointOrder1 = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Contour);
    HOperatorSet.GenEmptyObj(out ho_UsedEdges);
    HOperatorSet.GenEmptyObj(out ho_ResultContours);
    HOperatorSet.GenEmptyObj(out ho_ModelContour);
    HOperatorSet.GenEmptyObj(out ho_CrossCenter);
    HOperatorSet.GenEmptyObj(out ho_Contours);
    try
    {
      HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
      //創建方形索引區域
      HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "rectangle2", ((((((hv_InitialRow.TupleConcat(
          hv_InitialColumn))).TupleConcat(hv_InitialPhi))).TupleConcat(hv_InitialLength1))).TupleConcat(
          hv_InitialLength2), hv_MeasureLength, 5, 1, hv_MeasureThreshold, new HTuple(), 
          new HTuple(), out hv_circleIndices);
      ho_ModelContour.Dispose();
      HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, 
          "all", 1.5);
      //第一個點或最後一個點
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, 
          "measure_select", hv_MeasureSelect);
      HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, 
          "min_score", 0.2);
      HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
      HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, 
          "all", "result_type", "all_param", out hv_circleParameter);
      ho_CrossCenter.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_CrossCenter, hv_circleParameter.TupleSelect(
          0), hv_circleParameter.TupleSelect(1), 20, 0.785398);
      //白找黑('negative')或黑找白('positive')
      ho_Contour.Dispose();
      HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour, hv_MetrologyHandle, 
          "all", hv_MeasureTransition, out hv_Row, out hv_Column);
      ho_Contours.Dispose();
      HOperatorSet.GetMetrologyObjectResultContour(out ho_Contours, hv_MetrologyHandle, 
          "all", "all", 1.5);
      HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges", 
          "row", out hv_UsedRow);
      HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges", 
          "column", out hv_UsedColumn);
      ho_UsedEdges.Dispose();
      HOperatorSet.GenCrossContourXld(out ho_UsedEdges, hv_UsedRow, hv_UsedColumn, 
          10, (new HTuple(45)).TupleRad());
      ho_ResultContours.Dispose();
      HOperatorSet.GetMetrologyObjectResultContour(out ho_ResultContours, hv_MetrologyHandle, 
          "all", "all", 1.5);
      HOperatorSet.FitRectangle2ContourXld(ho_ResultContours, "regression", -1, 0, 
          0, 3, 2, out hv_ResultRow, out hv_ResultColumn, out hv_ResultPhi, out hv_ResultLength1, 
          out hv_ResultLength2, out hv_PointOrder1);
      HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
      ho_ModelContour.Dispose();
      ho_CrossCenter.Dispose();
      ho_Contours.Dispose();

      return;
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_ModelContour.Dispose();
      ho_CrossCenter.Dispose();
      ho_Contours.Dispose();

      throw HDevExpDefaultException;
    }
  }

  // Main procedure 
  private void action()
  {


    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image, ho_Rectangle, ho_ImageReduced;
    HObject ho_ImagePart, ho_RegionLines, ho_ImageMedian1, ho_RegionHysteresis;
    HObject ho_ConnectedRegions, ho_RegionFillUp, ho_SelectedRegions;
    HObject ho_Rectangle2, ho_UsedEdges1, ho_Contour1, ho_ResultContours;
    HObject ho_CrossCenter, ho_ResultRegion, ho_InnerCircle;
    HObject ho_OuterCircle, ho_RegionDifference, ho_RegionIntersection;
    HObject ho_ImageMedian, ho_Region2, ho_RegionFillUp1, ho_SelectedRegions1;
    HObject ho_Rectangle1, ho_ImageReduced1, ho_ImagePart1;
    HObject ho_SymbolXLDs, ho_Region, ho_RegionMoved, ho_RectangleMoved;
    HObject ho_RegionDifference1, ho_Image1, ho_Image2, ho_Image3;
    HObject ho_Image4, ho_EmptyObject1;

    // Local control variables 

    HTuple hv_ImageWidth = null, hv_ImageHeight = null;
    HTuple hv_Row3 = null, hv_Column3 = null, hv_Phi1 = null;
    HTuple hv_Length11 = null, hv_Length12 = null, hv_Length1 = new HTuple();
    HTuple hv_Length2 = new HTuple(), hv_Row1 = null, hv_Column1 = null;
    HTuple hv_Phi2 = null, hv_Length13 = null, hv_Length23 = null;
    HTuple hv_ResultRow = null, hv_ResultColumn = null, hv_ResultRadius = null;
    HTuple hv_Row2 = null, hv_Column2 = null, hv_Phi = null;
    HTuple hv_Length21 = null, hv_Length22 = null, hv_DataCodeHandle = null;
    HTuple hv_ResultHandles = null, hv_DecodedDataStrings = null;
    HTuple hv_Area = null, hv_Row = null, hv_Column = null;
    HTuple hv_PointOrder = null, hv_Number = null, hv_number1 = null;
    HTuple hv_number2 = null, hv_number3 = null, hv_number4 = null;
    HTuple hv_MaxRow = null, hv_MaxColumn = null, hv_j = null;
    HTuple hv_i = new HTuple(), hv_Count1 = null;
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Rectangle);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    HOperatorSet.GenEmptyObj(out ho_RegionLines);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian1);
    HOperatorSet.GenEmptyObj(out ho_RegionHysteresis);
    HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
    HOperatorSet.GenEmptyObj(out ho_Rectangle2);
    HOperatorSet.GenEmptyObj(out ho_UsedEdges1);
    HOperatorSet.GenEmptyObj(out ho_Contour1);
    HOperatorSet.GenEmptyObj(out ho_ResultContours);
    HOperatorSet.GenEmptyObj(out ho_CrossCenter);
    HOperatorSet.GenEmptyObj(out ho_ResultRegion);
    HOperatorSet.GenEmptyObj(out ho_InnerCircle);
    HOperatorSet.GenEmptyObj(out ho_OuterCircle);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference);
    HOperatorSet.GenEmptyObj(out ho_RegionIntersection);
    HOperatorSet.GenEmptyObj(out ho_ImageMedian);
    HOperatorSet.GenEmptyObj(out ho_Region2);
    HOperatorSet.GenEmptyObj(out ho_RegionFillUp1);
    HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
    HOperatorSet.GenEmptyObj(out ho_Rectangle1);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
    HOperatorSet.GenEmptyObj(out ho_ImagePart1);
    HOperatorSet.GenEmptyObj(out ho_SymbolXLDs);
    HOperatorSet.GenEmptyObj(out ho_Region);
    HOperatorSet.GenEmptyObj(out ho_RegionMoved);
    HOperatorSet.GenEmptyObj(out ho_RectangleMoved);
    HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
    HOperatorSet.GenEmptyObj(out ho_Image1);
    HOperatorSet.GenEmptyObj(out ho_Image2);
    HOperatorSet.GenEmptyObj(out ho_Image3);
    HOperatorSet.GenEmptyObj(out ho_Image4);
    HOperatorSet.GenEmptyObj(out ho_EmptyObject1);
    try
    {
      //dev_open_window(...);
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "C:/Users/Administrator/Desktop/掃碼圖/Image_20200622144326508.bmp");

      HOperatorSet.GetImageSize(ho_Image, out hv_ImageWidth, out hv_ImageHeight);
      ho_Rectangle.Dispose();
      HOperatorSet.GenRectangle1(out ho_Rectangle, 777, 2173, 1692, 2927);
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);
      ho_ImagePart.Dispose();
      HOperatorSet.CropDomain(ho_ImageReduced, out ho_ImagePart);
      HOperatorSet.DrawRectangle2(hv_ExpDefaultWinHandle, out hv_Row3, out hv_Column3, 
          out hv_Phi1, out hv_Length11, out hv_Length12);
      ho_RegionLines.Dispose();
      HOperatorSet.GenRegionLine(out ho_RegionLines, 0, 2560, 512, 2560);
      if ((int)(new HTuple(hv_Length11.TupleGreater(hv_Length12))) != 0)
      {
        hv_Length1 = hv_Length11.Clone();
        hv_Length2 = hv_Length12.Clone();
        hv_Phi1 = hv_Phi1.Clone();
      }
      else
      {
        hv_Length1 = hv_Length12.Clone();
        hv_Length2 = hv_Length11.Clone();
        hv_Phi1 = hv_Phi1+((new HTuple(90)).TupleRad());
      }
      ho_ImageMedian1.Dispose();
      HOperatorSet.MedianRect(ho_ImagePart, out ho_ImageMedian1, 20, 20);

      ho_RegionHysteresis.Dispose();
      HOperatorSet.HysteresisThreshold(ho_ImageMedian1, out ho_RegionHysteresis, 
          30, 80, 5);
      //threshold (ImagePart, Region1, 80, 255)
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionHysteresis, out ho_ConnectedRegions);
      ho_RegionFillUp.Dispose();
      HOperatorSet.FillUp(ho_ConnectedRegions, out ho_RegionFillUp);
      ho_SelectedRegions.Dispose();
      HOperatorSet.SelectShape(ho_RegionFillUp, out ho_SelectedRegions, (new HTuple("rect2_len1")).TupleConcat(
          "rect2_len2"), "and", ((hv_Length1-50)).TupleConcat(hv_Length2-50), ((hv_Length1+50)).TupleConcat(
          hv_Length2+50));
      HOperatorSet.SmallestRectangle2(ho_SelectedRegions, out hv_Row1, out hv_Column1, 
          out hv_Phi2, out hv_Length13, out hv_Length23);
      ho_Rectangle2.Dispose();
      HOperatorSet.GenRectangle2(out ho_Rectangle2, hv_Row1, hv_Column1, hv_Phi2, 
          hv_Length13, hv_Length23);
      //area_center (SelectedRegions, Area1, Row1, Column1)
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ReduceDomain(ho_ImagePart, ho_Rectangle2, out ExpTmpOutVar_0);
      ho_ImagePart.Dispose();
      ho_ImagePart = ExpTmpOutVar_0;
      }
      ho_UsedEdges1.Dispose();ho_Contour1.Dispose();ho_ResultContours.Dispose();ho_CrossCenter.Dispose();
      gen_circle_center(ho_ImagePart, out ho_UsedEdges1, out ho_Contour1, out ho_ResultContours, 
          out ho_CrossCenter, hv_Row1, hv_Column1, hv_Length1, 20, 50, "negative", 
          "last", out hv_ResultRow, out hv_ResultColumn, out hv_ResultRadius);
      //gen_rectangle2_center (ImagePart, Contour, UsedEdges, ResultContours, Row1, Column1, Phi1, Length1, Length2, 20, 50, 'negative', 'last', ResultRow, ResultColumn, ResultPhi, ResultLength1, ResultLength2)

      ho_ResultRegion.Dispose();
      HOperatorSet.GenRegionContourXld(ho_ResultContours, out ho_ResultRegion, "filled");
      ho_InnerCircle.Dispose();
      HOperatorSet.GenCircle(out ho_InnerCircle, hv_ResultRow, hv_ResultColumn, 210);
      ho_OuterCircle.Dispose();
      HOperatorSet.GenCircle(out ho_OuterCircle, hv_ResultRow, hv_ResultColumn, 275);
      ho_RegionDifference.Dispose();
      HOperatorSet.Difference(ho_OuterCircle, ho_InnerCircle, out ho_RegionDifference
          );
      ho_RegionIntersection.Dispose();
      HOperatorSet.Intersection(ho_RegionDifference, ho_Rectangle2, out ho_RegionIntersection
          );

      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_ImagePart, ho_RegionIntersection, out ho_ImageReduced
          );
      ho_ImageMedian.Dispose();
      HOperatorSet.MedianRect(ho_ImageReduced, out ho_ImageMedian, 5, 5);
      ho_Region2.Dispose();
      HOperatorSet.Threshold(ho_ImageMedian, out ho_Region2, 0, 40);
      ho_RegionFillUp1.Dispose();
      HOperatorSet.FillUp(ho_Region2, out ho_RegionFillUp1);
      ho_ConnectedRegions.Dispose();
      HOperatorSet.Connection(ho_RegionFillUp1, out ho_ConnectedRegions);

      ho_SelectedRegions1.Dispose();
      HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions1, (new HTuple("rect2_len1")).TupleConcat(
          "rect2_len2"), "and", (new HTuple(30.092)).TupleConcat(15.428), (new HTuple(32.23)).TupleConcat(
          24.287));
      HOperatorSet.SmallestRectangle2(ho_SelectedRegions1, out hv_Row2, out hv_Column2, 
          out hv_Phi, out hv_Length21, out hv_Length22);
      ho_Rectangle1.Dispose();
      HOperatorSet.GenRectangle2(out ho_Rectangle1, hv_Row2, hv_Column2, hv_Phi, 
          hv_Length21, hv_Length22);
      HOperatorSet.RegionFeatures(ho_Rectangle1, "row1", out hv_Row1);
      HOperatorSet.RegionFeatures(ho_Rectangle1, "column1", out hv_Column1);
      ho_ImageReduced1.Dispose();
      HOperatorSet.ReduceDomain(ho_ImagePart, ho_Rectangle1, out ho_ImageReduced1
          );
      ho_ImagePart1.Dispose();
      HOperatorSet.CropDomain(ho_ImageReduced1, out ho_ImagePart1);


      HOperatorSet.CreateDataCode2dModel("Data Matrix ECC 200", "default_parameters", 
          "maximum_recognition", out hv_DataCodeHandle);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "polarity", "light_on_dark");
      //鏡向
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "mirrored", "no");
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "timeout", 2000);

      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "symbol_rows_min", 14);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "symbol_rows_max", 18);

      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "module_size_min", 2);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "module_size_max", 4);
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "decoding_scheme", "raw");
      HOperatorSet.SetDataCode2dParam(hv_DataCodeHandle, "persistence", 0);

      ho_SymbolXLDs.Dispose();
      HOperatorSet.FindDataCode2d(ho_ImagePart1, out ho_SymbolXLDs, hv_DataCodeHandle, 
          "stop_after_result_num", 1, out hv_ResultHandles, out hv_DecodedDataStrings);

      HOperatorSet.AreaCenterXld(ho_SymbolXLDs, out hv_Area, out hv_Row, out hv_Column, 
          out hv_PointOrder);
      ho_Region.Dispose();
      HOperatorSet.GenRegionContourXld(ho_SymbolXLDs, out ho_Region, "margin");

      ho_RegionMoved.Dispose();
      HOperatorSet.MoveRegion(ho_Region, out ho_RegionMoved, hv_Row1+777, hv_Column1+2173);
      ho_RectangleMoved.Dispose();
      HOperatorSet.MoveRegion(ho_Rectangle1, out ho_RectangleMoved, 777, 2173);
      ho_RegionDifference1.Dispose();
      HOperatorSet.Difference(ho_RegionMoved, ho_RectangleMoved, out ho_RegionDifference1
          );
      HOperatorSet.CountObj(ho_RegionDifference1, out hv_Number);
      HDevelopStop();
      //**************************
      //dev_close_window ()
      HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
      hv_number1 = 0;
      hv_number2 = 0;
      hv_number3 = 0;
      hv_number4 = 0;
      hv_MaxRow = 6;

      hv_MaxColumn = 7;
      //draw_line (200000, Row1, Column1, Row2, Column2)
      ho_Image1.Dispose();
      HOperatorSet.ReadImage(out ho_Image1, "C:/Users/Administrator/Desktop/掃碼圖/Image_20200622144326508.bmp");
      ho_Image2.Dispose();
      HOperatorSet.ReadImage(out ho_Image2, "C:/Users/Administrator/Desktop/掃碼圖/Image_20200605154110434.bmp");
      ho_Image3.Dispose();
      HOperatorSet.ReadImage(out ho_Image3, "C:/Users/Administrator/Desktop/掃碼圖/Image_20200605154140398.bmp");
      ho_Image4.Dispose();
      HOperatorSet.ReadImage(out ho_Image4, "C:/Users/Administrator/Desktop/掃碼圖/Image_20200605154203872.bmp");
      HOperatorSet.GetImageSize(ho_Image1, out hv_ImageWidth, out hv_ImageHeight);
      HTuple end_val93 = hv_MaxRow-1;
      HTuple step_val93 = 1;
      for (hv_j=0; hv_j.Continue(end_val93, step_val93); hv_j = hv_j.TupleAdd(step_val93))
      {
        HTuple end_val94 = hv_MaxColumn-1;
        HTuple step_val94 = 1;
        for (hv_i=0; hv_i.Continue(end_val94, step_val94); hv_i = hv_i.TupleAdd(step_val94))
        {

          //disp_cross (200000, j*ImageHeight/6, i*ImageWidth/7, 5120, 0)
        }
      }
      HOperatorSet.DispObj(ho_Image1, hv_ExpDefaultWinHandle);
      ho_EmptyObject1.Dispose();
      find_Barcode(ho_Image1, out ho_EmptyObject1, 1, hv_MaxRow, hv_MaxColumn, hv_Phi1, 
          hv_Length1, hv_Length2, out hv_Count1);
      //find_Barcode (Image2, EmptyObject2, 2, MaxRow, MaxColumn, Phi1, Length1, Length2, Count2)
      //find_Barcode (Image3, EmptyObject3, 3, MaxRow, MaxColumn, Phi1, Length1, Length2, Count3)
      //find_Barcode (Image4, EmptyObject4, 4, MaxRow, MaxColumn, Phi1, Length1, Length2, Count4)

      HDevelopStop();
      //興趣範圍
      //Count := Count1+ Count2+ Count3+ Count4
      //dev_open_window (0, 0, ImageWidth*2, ImageHeight*2, 'black', WindowHandle)
      //dev_close_window(...);
    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();
      ho_Rectangle.Dispose();
      ho_ImageReduced.Dispose();
      ho_ImagePart.Dispose();
      ho_RegionLines.Dispose();
      ho_ImageMedian1.Dispose();
      ho_RegionHysteresis.Dispose();
      ho_ConnectedRegions.Dispose();
      ho_RegionFillUp.Dispose();
      ho_SelectedRegions.Dispose();
      ho_Rectangle2.Dispose();
      ho_UsedEdges1.Dispose();
      ho_Contour1.Dispose();
      ho_ResultContours.Dispose();
      ho_CrossCenter.Dispose();
      ho_ResultRegion.Dispose();
      ho_InnerCircle.Dispose();
      ho_OuterCircle.Dispose();
      ho_RegionDifference.Dispose();
      ho_RegionIntersection.Dispose();
      ho_ImageMedian.Dispose();
      ho_Region2.Dispose();
      ho_RegionFillUp1.Dispose();
      ho_SelectedRegions1.Dispose();
      ho_Rectangle1.Dispose();
      ho_ImageReduced1.Dispose();
      ho_ImagePart1.Dispose();
      ho_SymbolXLDs.Dispose();
      ho_Region.Dispose();
      ho_RegionMoved.Dispose();
      ho_RectangleMoved.Dispose();
      ho_RegionDifference1.Dispose();
      ho_Image1.Dispose();
      ho_Image2.Dispose();
      ho_Image3.Dispose();
      ho_Image4.Dispose();
      ho_EmptyObject1.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image.Dispose();
    ho_Rectangle.Dispose();
    ho_ImageReduced.Dispose();
    ho_ImagePart.Dispose();
    ho_RegionLines.Dispose();
    ho_ImageMedian1.Dispose();
    ho_RegionHysteresis.Dispose();
    ho_ConnectedRegions.Dispose();
    ho_RegionFillUp.Dispose();
    ho_SelectedRegions.Dispose();
    ho_Rectangle2.Dispose();
    ho_UsedEdges1.Dispose();
    ho_Contour1.Dispose();
    ho_ResultContours.Dispose();
    ho_CrossCenter.Dispose();
    ho_ResultRegion.Dispose();
    ho_InnerCircle.Dispose();
    ho_OuterCircle.Dispose();
    ho_RegionDifference.Dispose();
    ho_RegionIntersection.Dispose();
    ho_ImageMedian.Dispose();
    ho_Region2.Dispose();
    ho_RegionFillUp1.Dispose();
    ho_SelectedRegions1.Dispose();
    ho_Rectangle1.Dispose();
    ho_ImageReduced1.Dispose();
    ho_ImagePart1.Dispose();
    ho_SymbolXLDs.Dispose();
    ho_Region.Dispose();
    ho_RegionMoved.Dispose();
    ho_RectangleMoved.Dispose();
    ho_RegionDifference1.Dispose();
    ho_Image1.Dispose();
    ho_Image2.Dispose();
    ho_Image3.Dispose();
    ho_Image4.Dispose();
    ho_EmptyObject1.Dispose();

  }

  public void InitHalcon()
  {
    // Default settings used in HDevelop 
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
  }

  public void RunHalcon(HTuple Window)
  {
    hv_ExpDefaultWinHandle = Window;
    action();
  }

}

